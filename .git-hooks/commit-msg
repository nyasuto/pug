#!/bin/sh
# pug コンパイラプロジェクト - Commit-msg フック
# コミットメッセージ規則を強制

set -e

commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

echo "📝 コミットメッセージチェック実行中..."

# 空のコミットメッセージチェック
if [ -z "$(echo "$commit_msg" | sed '/^#/d' | sed '/^$/d')" ]; then
    echo "❌ エラー: コミットメッセージが空です"
    exit 1
fi

# マージコミットの場合はスキップ
if echo "$commit_msg" | grep -q "^Merge "; then
    echo "🔀 マージコミットのためスキップ"
    exit 0
fi

# Conventional Commits 形式チェック
# 形式: <type>: <description>
valid_types="feat|fix|docs|style|refactor|test|chore|ci|perf|security|deps"
title_line=$(echo "$commit_msg" | head -n1)

if ! echo "$title_line" | grep -qE "^($valid_types): .+"; then
    echo "❌ エラー: コミットメッセージがConventional Commits形式に従っていません"
    echo ""
    echo "正しい形式:"
    echo "  <type>: <description>"
    echo ""
    echo "利用可能なtype:"
    echo "  feat:     新機能"
    echo "  fix:      バグ修正"  
    echo "  docs:     ドキュメント"
    echo "  style:    コードスタイル（機能に影響しない変更）"
    echo "  refactor: リファクタリング"
    echo "  test:     テスト追加・修正"
    echo "  chore:    その他のタスク"
    echo "  ci:       CI/CD関連"
    echo "  perf:     性能改善"
    echo "  security: セキュリティ修正"
    echo "  deps:     依存関係更新"
    echo ""
    echo "例:"
    echo "  feat: Phase 1.0 レクサー実装"
    echo "  fix: 型検査エラーの修正"
    echo "  docs: README の使用方法更新"
    echo ""
    echo "現在のコミットメッセージ:"
    echo "  $title_line"
    exit 1
fi

# タイトル長さチェック（72文字制限）
title_length=$(echo "$title_line" | wc -c)
if [ $title_length -gt 72 ]; then
    echo "❌ エラー: コミットメッセージのタイトルが長すぎます ($title_length文字)"
    echo "   72文字以内にしてください"
    echo "   現在: $title_line"
    exit 1
fi

# タイトルの末尾にピリオドがないかチェック
if echo "$title_line" | grep -q '\.$'; then
    echo "❌ エラー: コミットメッセージのタイトル末尾にピリオドは不要です"
    echo "   現在: $title_line"
    exit 1
fi

# 説明文がある場合の形式チェック
line_count=$(echo "$commit_msg" | sed '/^#/d' | wc -l)
if [ $line_count -gt 1 ]; then
    # 2行目が空行かチェック
    second_line=$(echo "$commit_msg" | sed -n '2p')
    if [ -n "$second_line" ] && [ "$second_line" != "" ]; then
        echo "❌ エラー: 2行目は空行にしてください"
        echo "   形式: タイトル行 + 空行 + 説明文"
        exit 1
    fi
    
    # 本文の各行が72文字以内かチェック
    body_lines=$(echo "$commit_msg" | sed '1,2d' | sed '/^#/d')
    echo "$body_lines" | while IFS= read -r line; do
        if [ -n "$line" ]; then
            line_length=$(echo "$line" | wc -c)
            if [ $line_length -gt 72 ]; then
                echo "❌ エラー: 本文の行が長すぎます ($line_length文字)"
                echo "   72文字以内にしてください: $line"
                exit 1
            fi
        fi
    done
fi

# 日本語チェック（文字化け防止）
if echo "$commit_msg" | grep -q $'\x1b'; then
    echo "❌ エラー: コミットメッセージにエスケープシーケンスが含まれています"
    exit 1
fi

# WIP/TODOチェック（本番では避けるべき）
if echo "$title_line" | grep -iqE "(wip|todo|fixme|hack|temp)"; then
    echo "⚠️  警告: 一時的なコミットメッセージが検出されました"
    echo "   プッシュ前に適切なメッセージに変更してください: $title_line"
fi

# Issue参照チェック（機能追加・バグ修正の場合）
if echo "$title_line" | grep -qE "^(feat|fix):" && ! echo "$commit_msg" | grep -qE "#[0-9]+"; then
    echo "ℹ️  情報: Issue番号の参照を推奨します"
    echo "   例: feat: Phase 1.0 レクサー実装 (#2)"
fi

# コミットにClaude Code署名を追加
if ! echo "$commit_msg" | grep -q "Generated with.*Claude Code"; then
    echo "" >> "$commit_msg_file"
    echo "🤖 Generated with [Claude Code](https://claude.ai/code)" >> "$commit_msg_file"
    echo "" >> "$commit_msg_file"
    echo "Co-Authored-By: Claude <noreply@anthropic.com>" >> "$commit_msg_file"
fi

echo "✅ コミットメッセージチェック完了"