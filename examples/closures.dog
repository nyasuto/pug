// クロージャとスコープのデモ - Dog言語
// 高階関数とクロージャの活用例

// カウンター生成器（クロージャの基本例）
let makeCounter = fn(initial) {
    let count = initial;
    return fn() {
        count = count + 1;
        return count;
    };
};

// 加算器生成器
let makeAdder = fn(x) {
    return fn(y) {
        return x + y;
    };
};

// 乗算器生成器
let makeMultiplier = fn(factor) {
    return fn(number) {
        return number * factor;
    };
};

// 関数合成器
let compose = fn(f, g) {
    return fn(x) {
        return f(g(x));
    };
};

// 高階関数：配列の各要素に関数を適用
let map = fn(arr, func) {
    if (len(arr) == 0) {
        return [];
    };
    
    let result = [];
    let remaining = arr;
    
    while (len(remaining) > 0) {
        let item = first(remaining);
        let transformed = func(item);
        result = push(result, transformed);
        remaining = rest(remaining);
    };
    
    return result;
};

// 高階関数：配列をフィルタリング
let filter = fn(arr, predicate) {
    if (len(arr) == 0) {
        return [];
    };
    
    let result = [];
    let remaining = arr;
    
    while (len(remaining) > 0) {
        let item = first(remaining);
        if (predicate(item)) {
            result = push(result, item);
        };
        remaining = rest(remaining);
    };
    
    return result;
};

// 高階関数：配列を畳み込み
let reduce = fn(arr, func, initial) {
    let result = initial;
    let remaining = arr;
    
    while (len(remaining) > 0) {
        let item = first(remaining);
        result = func(result, item);
        remaining = rest(remaining);
    };
    
    return result;
};

// メイン処理
puts("=== クロージャとスコープのデモ ===");
puts("");

// カウンターのテスト
puts("1. カウンター生成器:");
let counter1 = makeCounter(0);
let counter2 = makeCounter(100);

puts("counter1:", counter1()); // 1
puts("counter1:", counter1()); // 2
puts("counter2:", counter2()); // 101
puts("counter1:", counter1()); // 3
puts("counter2:", counter2()); // 102
puts("");

// 加算器のテスト
puts("2. 加算器生成器:");
let add5 = makeAdder(5);
let add10 = makeAdder(10);

puts("add5(3) =", add5(3));   // 8
puts("add10(3) =", add10(3)); // 13
puts("");

// 乗算器のテスト
puts("3. 乗算器生成器:");
let double = makeMultiplier(2);
let triple = makeMultiplier(3);

puts("double(7) =", double(7)); // 14
puts("triple(7) =", triple(7)); // 21
puts("");

// 関数合成のテスト
puts("4. 関数合成:");
let addThenDouble = compose(double, add5);
puts("addThenDouble(3) =", addThenDouble(3)); // (3+5)*2 = 16
puts("");

// 配列操作のテスト
puts("5. 高階関数と配列操作:");

// テスト用配列の作成
let numbers = [1, 2, 3, 4, 5];
// 実際の実装では以下のように構築:
// let numbers = push(push(push(push(push([], 1), 2), 3), 4), 5);

puts("元の配列:", numbers);

// map のテスト（実装上の制約により、実際の配列操作は制限されます）
puts("各要素を2倍（概念的）:");
puts("map(numbers, double) の結果は [2, 4, 6, 8, 10] になります");

puts("");
puts("関数型プログラミングの要素がDog言語でも利用できます！");