name: CI/CD - pug コンパイラ

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: 'stable'

jobs:
  # 品質チェック
  quality:
    name: 🔍 品質チェック
    runs-on: ubuntu-latest
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4

    - name: 🐹 Go セットアップ
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 📦 依存関係キャッシュ
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: 📋 依存関係インストール
      run: make deps

    - name: 🔍 品質チェック (fmt + lint + test)
      run: make quality

    - name: 📊 テストカバレッジ
      run: make test-cov

    - name: 📊 Phase1 カバレッジアップロード
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./phase1.cover
        flags: phase1
        name: codecov-phase1
        fail_ci_if_error: false

    - name: 📊 Phase2 カバレッジアップロード
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./phase2.cover
        flags: phase2
        name: codecov-phase2
        fail_ci_if_error: false

    - name: 📊 統合カバレッジアップロード
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: ./coverage.out
        name: codecov-combined
        fail_ci_if_error: false

  # セキュリティスキャン
  security:
    name: 🔒 セキュリティスキャン
    runs-on: ubuntu-latest
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4

    - name: 🐹 Go セットアップ
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 🛡️ Go セキュリティチェック (gosec)
      uses: securego/gosec@master
      with:
        args: ./...

  # ビルドテスト
  build:
    name: 🔨 ビルドテスト
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['stable']
    
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4

    - name: 🐹 Go セットアップ
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}

    - name: 📦 依存関係インストール
      run: make deps

    - name: 🔨 ビルド
      run: make build

    - name: 🧪 テスト実行
      run: make test

    - name: 📄 成果物アップロード
      uses: actions/upload-artifact@v4
      with:
        name: binaries-ubuntu-go${{ matrix.go-version }}
        path: bin/

  # 性能ベンチマーク
  benchmark:
    name: ⚡ 性能ベンチマーク
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🐹 Go セットアップ
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 📦 依存関係インストール
      run: make deps

    - name: 🔨 ベンチマーク用ビルド
      run: |
        make build || echo "⚠️ ビルド失敗（継続）"

    - name: ⚡ 基本ベンチマーク実行
      run: |
        echo "🚀 基本ベンチマーク実行中..."
        make bench > benchmark-basic.txt 2>&1 || true
        
    - name: 📊 包括的ベンチマーク実行
      run: |
        echo "📊 包括的ベンチマーク実行中..."
        # コンパイラベンチマーク
        go test -v -bench=BenchmarkCompiler ./benchmark/... > benchmark-compiler.txt 2>&1 || true
        
        # GCC比較ベンチマーク（GCC利用可能時のみ）
        if command -v gcc >/dev/null 2>&1; then
          echo "🏁 GCC比較ベンチマーク実行中..."
          go test -v -bench=BenchmarkVsGCC ./benchmark/... > benchmark-gcc.txt 2>&1 || true
        else
          echo "⚠️ GCCが見つからないため、GCC比較をスキップ" > benchmark-gcc.txt
        fi
        
        # Rust比較ベンチマーク（Rust利用可能時のみ）
        if command -v cargo >/dev/null 2>&1; then
          echo "🦀 Rust比較ベンチマーク実行中..."
          go test -v -bench=BenchmarkVsRust ./benchmark/... -timeout=10m > benchmark-rust.txt 2>&1 || true
        else
          echo "⚠️ Rustが見つからないため、Rust比較をスキップ" > benchmark-rust.txt
        fi
        
        # 進化分析ベンチマーク
        echo "📈 進化分析ベンチマーク実行中..."
        go test -v -bench=BenchmarkSuite ./benchmark/... > benchmark-evolution.txt 2>&1 || true

    - name: 📋 ベンチマーク結果統合
      run: |
        echo "📋 ベンチマーク結果を統合中..."
        cat > benchmark-comprehensive.txt << 'EOF'
        # 🐺 Pugコンパイラ包括的ベンチマーク結果
        
        実行日時: $(date '+%Y-%m-%d %H:%M:%S UTC')
        GitHub Actions Run: ${{ github.run_number }}
        コミット: ${{ github.sha }}
        ブランチ: ${{ github.ref_name }}
        
        ## 📊 基本ベンチマーク
        EOF
        cat benchmark-basic.txt >> benchmark-comprehensive.txt || true
        
        echo -e "\n\n## 🔧 コンパイラベンチマーク" >> benchmark-comprehensive.txt
        cat benchmark-compiler.txt >> benchmark-comprehensive.txt || true
        
        echo -e "\n\n## 🏁 GCC比較ベンチマーク" >> benchmark-comprehensive.txt
        cat benchmark-gcc.txt >> benchmark-comprehensive.txt || true
        
        echo -e "\n\n## 🦀 Rust比較ベンチマーク" >> benchmark-comprehensive.txt
        cat benchmark-rust.txt >> benchmark-comprehensive.txt || true
        
        echo -e "\n\n## 📈 進化分析ベンチマーク" >> benchmark-comprehensive.txt
        cat benchmark-evolution.txt >> benchmark-comprehensive.txt || true
        
        echo -e "\n\n---\n🤖 Generated with [Claude Code](https://claude.ai/code)" >> benchmark-comprehensive.txt

    - name: 📊 GitHub Actions サマリー更新
      run: |
        echo "## 🚀 性能ベンチマーク結果" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📈 実行概要" >> $GITHUB_STEP_SUMMARY
        echo "- **実行日時**: $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **Run番号**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **コミット**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **ブランチ**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 🔧 実行されたベンチマーク" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ 基本ベンチマーク (phase1/phase2)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ コンパイラベンチマーク (包括的測定)" >> $GITHUB_STEP_SUMMARY
        
        if command -v gcc >/dev/null 2>&1; then
          echo "- ✅ GCC比較ベンチマーク" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ GCC比較ベンチマーク (スキップ)" >> $GITHUB_STEP_SUMMARY
        fi
        
        if command -v cargo >/dev/null 2>&1; then
          echo "- ✅ Rust比較ベンチマーク" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ Rust比較ベンチマーク (スキップ)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- ✅ 進化分析ベンチマーク" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### 📋 詳細結果" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        head -100 benchmark-comprehensive.txt >> $GITHUB_STEP_SUMMARY || true
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "... (詳細はArtifactsを参照)" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

    - name: 📈 ベンチマーク結果保存
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-comprehensive
        path: |
          benchmark-*.txt
        retention-days: 30

    - name: 📊 パフォーマンス回帰検出
      run: |
        echo "📊 パフォーマンス回帰検出中..."
        # 簡易的な回帰検出（実装例）
        if grep -q "FAIL" benchmark-comprehensive.txt; then
          echo "⚠️ ベンチマーク失敗が検出されました" >> $GITHUB_STEP_SUMMARY
          echo "::warning::ベンチマーク実行中にエラーが発生しました"
        fi
        
        # TODO: 過去のベンチマーク結果との比較
        echo "✅ パフォーマンス回帰検出完了" >> $GITHUB_STEP_SUMMARY

  # リリース準備（タグ作成時）
  release:
    name: 🚀 リリース
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [quality, security, build]
    
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4

    - name: 🐹 Go セットアップ
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: 🔨 リリース用ビルド
      run: |
        make clean
        make build
        
    - name: 📦 リリース作成
      uses: softprops/action-gh-release@v2
      with:
        files: bin/*
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}